import{_ as e,c as r,o as a,ap as t}from"./chunks/framework.Dklddx0T.js";const b=JSON.parse('{"title":"Vue3 的源码怎么看","description":"","frontmatter":{},"headers":[],"relativePath":"article/article/9.md","filePath":"article/article/9.md","lastUpdated":1725167598000}'),o={name:"article/article/9.md"},i=t('<h1 id="vue3-的源码怎么看" tabindex="-1">Vue3 的源码怎么看 <a class="header-anchor" href="#vue3-的源码怎么看" aria-label="Permalink to &quot;Vue3 的源码怎么看&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本篇文章会介绍一些学习 <code>vue3</code> 的一些学习的方式，我将会介绍 <code>vue3</code> 从社区开始入手，到阅读源码，可能篇幅较长，日常更新中。</p><p>下面解答一些问题</p><ul><li>为什么要学习源码？</li></ul><p>相信很多人，并不知道为什么需要阅读源码，可能大多数只是感觉可以用在可以装 B 上，但其实不然，其实阅读源码可以提升我们的编程水平的，也就是内力。</p><p>相信通过阅读源码，日积月累，并把这些代码或思想应用的自己项目中去，相信能够很好的提升自己的编码能力。</p><ul><li>读完 vue 的代码之后，框架过时了怎么办？</li></ul><p>很多人可能会想：前端技术更新换代的那么迅速，当我刚刚花了很久的时间，阅读了一个框架或库的源码，但是又有了新的框架出现，我是不是白读了呢？我来解答一下：</p><p>所有的框架都会过时，我们需要的就是能够沉淀下来不变的东西，什么东西不变？算法，数据结构，编译原理，网络协议，操作系统，开发范式，软件工程，计算机组成原理。</p><p>我们通过阅读源码，可以将这些不变的东西进行沉淀，只要我们将里面的思想学会了，那么对于以后的任何框架，都可以根据我们的 <code>内力</code> 进行学习和阅读。</p><ul><li>源码那么多代码和文件夹，该怎么入手呢？</li></ul><p>虽然<a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">源码</a>代码很多，但是将其进行类别话的拆分，就可以很清晰明了了。</p><p>但是在阅读之前，需要将其中的项目说明文件进行阅读一遍，这也就是一个项目的说明书，不看说明书，可能你会摸不着头脑。</p><p>所以要先将 <code>说明书</code>（贡献指南）先看一遍。</p><ul><li>怎么把项目跑起来？</li></ul><p>在 <a href="https://github.com/vuejs/core/blob/main/.github/contributing.md" target="_blank" rel="noreferrer">贡献指南</a> 中，有详细的贡献细节描述、目录结构描述、安装方式，可以根据文档进行操作。</p><h2 id="将代码克隆到本地" tabindex="-1">将代码克隆到本地 <a class="header-anchor" href="#将代码克隆到本地" aria-label="Permalink to &quot;将代码克隆到本地&quot;">​</a></h2><p>vue3 的仓库 <a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">core</a> 在这里，可以先 <code>fork</code> 下来之后下载到本地。</p><h2 id="看-vue3-源码前的准备" tabindex="-1">看 vue3 源码前的准备 <a class="header-anchor" href="#看-vue3-源码前的准备" aria-label="Permalink to &quot;看 vue3 源码前的准备&quot;">​</a></h2><h3 id="技术点" tabindex="-1">技术点 <a class="header-anchor" href="#技术点" aria-label="Permalink to &quot;技术点&quot;">​</a></h3><ul><li><a href="https://www.tslang.cn/index.html" target="_blank" rel="noreferrer">TypeScript</a> 在 vue3 的源码中，大概涵盖了 <code>97%</code></li><li><a href="https://github.com/Tyh2001/the-super-tiny-compilerr" target="_blank" rel="noreferrer">the-super-tiny-compiler</a> 一个编译器，用于学习 <code>compiler</code> 层面，可能是有史以来最小的编译器</li><li><a href="https://github.com/Tyh2001/the-der-tiny-compiler" target="_blank" rel="noreferrer">the-der-tiny-compiler</a> 一个非常 der 的 vue compiler 实现</li></ul><h3 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h3><ul><li><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noreferrer">最长递增子序列</a>，在源码中，最长递增子序列的算法在 <a href="https://github.com/vuejs/core/blob/main/packages/runtime-core/src/renderer.ts" target="_blank" rel="noreferrer">runtime-core</a> 的 <code>2393</code> 行，最后一个函数。</li></ul><h3 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h3><ul><li>位运算</li><li>设计模式</li><li>动态规划</li></ul><h2 id="vue3-核心代码" tabindex="-1">Vue3 核心代码 <a class="header-anchor" href="#vue3-核心代码" aria-label="Permalink to &quot;Vue3 核心代码&quot;">​</a></h2><p>vue3 的核心源码在 <a href="https://github.com/vuejs/core/tree/main/packages" target="_blank" rel="noreferrer">packages</a> 中，简单分为三大模块，分别是由 <code>reactivity</code>、<code>compiler</code>、<code>runtime</code> 构成最核心的源码，下面分别来介绍一下</p><h3 id="reactivity" tabindex="-1">reactivity <a class="header-anchor" href="#reactivity" aria-label="Permalink to &quot;reactivity&quot;">​</a></h3><p><code>reactivity</code> 也就是响应式，它的源码建议第一个看，因为它只有 <code>1000</code> 行左右。读完之后你大概就可以知道响应式是怎么执行的，<code>proxy</code> 和 <code>get</code>、<code>set</code> 是怎么劫持的。</p><p>vue3 的 <code>reactivity</code> 是使用的 ES6 的 <a href="https://tianyuhao.cn/blog/docs/javascript/Proxy%20%E4%BB%A3%E7%90%86" target="_blank" rel="noreferrer">Proxy</a> 进行实现的，简单的实现方式可以参考 <a href="https://tianyuhao.cn/blog/docs/vue-design/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%93%8D%E5%BA%94%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">第四章 响应系统的作用与实现</a></p><h3 id="compiler" tabindex="-1">compiler <a class="header-anchor" href="#compiler" aria-label="Permalink to &quot;compiler&quot;">​</a></h3><p><code>compiler</code> 是编译器。第二个要看的就是 <code>compiler</code>。<code>compiler</code> 就需要硬啃了，如果对 <code>compiler</code> 不太熟悉，那么读 <code>runtime</code> 就非常痛苦。</p><p>如果你在读 <code>compiler</code> 的时候是非常痛苦的，那么你就需要了解基本是编译原理。这里推荐一个库，可能是有史以来最小的编译器：<a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noreferrer">the-super-tiny-compiler</a>，大概是一个 <code>200行</code> 左右的编译器实现。</p><h3 id="runtime" tabindex="-1">runtime <a class="header-anchor" href="#runtime" aria-label="Permalink to &quot;runtime&quot;">​</a></h3><p><code>runtime</code> 是运行时。<code>runtime</code> 接收的是 <code>compiler</code> 执行之后的结果，所以建议最后来看。</p><h3 id="简单介绍一下目录结构" tabindex="-1">简单介绍一下目录结构 <a class="header-anchor" href="#简单介绍一下目录结构" aria-label="Permalink to &quot;简单介绍一下目录结构&quot;">​</a></h3><ul><li><a href="https://github.com/vuejs/core/tree/main/packages/reactivity" target="_blank" rel="noreferrer">reactivity</a>: vue 独立的响应式模块</li><li><a href="https://github.com/vuejs/core/tree/main/packages/compiler-core" target="_blank" rel="noreferrer">compiler-core</a>: 与平台无关的编译模块，例如基础的 baseCompile 编译模版文件, baseParse 生成 AST</li><li><a href="https://github.com/vuejs/core/tree/main/packages/compiler-dom" target="_blank" rel="noreferrer">compiler-dom</a>: 基于 compiler-core，专为浏览器的编译模块，可以看到它基于 baseCompile，baseParse，重写了 compiler、parse</li><li><a href="https://github.com/vuejs/core/tree/main/packages/compiler-sfc" target="_blank" rel="noreferrer">compiler-sfc</a>: 用来编译 vue 单文件组件</li><li><a href="https://github.com/vuejs/core/tree/main/packages/compiler-ssr" target="_blank" rel="noreferrer">compiler-ssr</a>: 服务端渲染相关的</li><li><a href="https://github.com/vuejs/core/tree/main/packages/runtime-core" target="_blank" rel="noreferrer">runtime-core</a>: 也是与平台无关的基础模块，有 vue 的各类 API，虚拟 dom 的渲染器</li><li><a href="https://github.com/vuejs/core/tree/main/packages/runtime-dom" target="_blank" rel="noreferrer">runtime-dom</a>: 基于 runtime-core，针对浏览器的运行时</li><li><a href="https://github.com/vuejs/core/tree/main/packages/vue" target="_blank" rel="noreferrer">vue</a>: 引入导出 runtime-core，还有编译方法</li></ul><h2 id="先从社区入手" tabindex="-1">先从社区入手 <a class="header-anchor" href="#先从社区入手" aria-label="Permalink to &quot;先从社区入手&quot;">​</a></h2><h3 id="浏览最新-issues" tabindex="-1">浏览最新 issues <a class="header-anchor" href="#浏览最新-issues" aria-label="Permalink to &quot;浏览最新 issues&quot;">​</a></h3><p>根据众多的 <a href="https://github.com/vuejs/core/issues" target="_blank" rel="noreferrer">issues</a> 中可以进行根据他人提出的一些问题或者 <code>Bug</code>，可以根据描述进行修复，修复完成之后可以进行提交 <code>pr</code>。</p><h3 id="根据-close-的-issues-进行推断" tabindex="-1">根据 close 的 issues 进行推断 <a class="header-anchor" href="#根据-close-的-issues-进行推断" aria-label="Permalink to &quot;根据 close 的 issues 进行推断&quot;">​</a></h3><p>在已经关闭的 <a href="https://github.com/vuejs/core/issues?q=is%3Aissue+is%3Aclosed" target="_blank" rel="noreferrer">issues</a> 中，可以看到以往的 <code>issues</code> 中，一些问题大家是如何讨论的，最后是如何解决的，可以根据下面的评论回复可以获取一些修复的方式等。</p><h3 id="根据-commit-推断" tabindex="-1">根据 commit 推断 <a class="header-anchor" href="#根据-commit-推断" aria-label="Permalink to &quot;根据 commit 推断&quot;">​</a></h3><p>在 <a href="https://github.com/vuejs/core/commits/main" target="_blank" rel="noreferrer">commit</a> 中可以看到每一次的提交记录，在修订 <code>Bug</code> 可以根据后面的 <code>issues</code> 编号进行查看。</p><h3 id="pull-requests" tabindex="-1">Pull requests <a class="header-anchor" href="#pull-requests" aria-label="Permalink to &quot;Pull requests&quot;">​</a></h3><p>在这里可以看到最新的 <a href="https://github.com/vuejs/core/pulls" target="_blank" rel="noreferrer">PR</a>，可以根据别人提交 <code>PR</code> 的方式试着进去模仿提交新的 <code>PR</code>。</p><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h2><p>在 <a href="https://github.com/Tyh2001/awesome-vue3" target="_blank" rel="noreferrer">awesome-vue3</a> 里面，我整理了众多的 <code>vue3</code> 的一些周边资源，提供使用，欢迎大家 <code>star</code>。</p><p>vue3 目前有两个官方文档，这里介绍一下：</p><ul><li><a href="https://staging-cn.vuejs.org/" target="_blank" rel="noreferrer">vue3 最新中文文档</a></li><li><a href="https://github.com/vuejs-translations/docs-zh-cn" target="_blank" rel="noreferrer">新版 Github</a></li><li><a href="https://v3.cn.vuejs.org/" target="_blank" rel="noreferrer">vue3 老版中文文档</a></li><li><a href="https://github.com/vuejs/docs-next-zh-cn" target="_blank" rel="noreferrer">老版 Github</a></li></ul>',51),l=[i];function c(s,h,u,n,d,p){return a(),r("div",null,l)}const f=e(o,[["render",c]]);export{b as __pageData,f as default};
