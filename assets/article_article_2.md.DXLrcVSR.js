import{_ as s,c as i,o as a,ap as e}from"./chunks/framework.BuhLBkgN.js";const u=JSON.parse('{"title":"关于组件库","description":"","frontmatter":{},"headers":[],"relativePath":"article/article/2.md","filePath":"article/article/2.md","lastUpdated":1716634940000}'),t={name:"article/article/2.md"},n=e(`<h1 id="关于组件库" tabindex="-1">关于组件库 <a class="header-anchor" href="#关于组件库" aria-label="Permalink to &quot;关于组件库&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>hi ～大家好</p><p>我是田同学，我是开源组件库 <a href="https://github.com/Tyh2001/tyh-ui" target="_blank" rel="noreferrer">tyh-ui</a> 的作者，在这篇文章中，来讲一下我从做开源到现在，已经接下来的打算，做一些总结。</p><h2 id="为什么会做开源组件库" tabindex="-1">为什么会做开源组件库 <a class="header-anchor" href="#为什么会做开源组件库" aria-label="Permalink to &quot;为什么会做开源组件库&quot;">​</a></h2><p>在去年中旬的时候，我偶然之间看到了一个<a href="https://www.bilibili.com/video/BV1Mp4y1q7FK?spm_id_from=333.880.my_history.page.click" target="_blank" rel="noreferrer">视频</a>，讲的就是手写 element-ui 的一些组件。在这之前，虽然 vue2 我已经用了很久了，各种的组件库也用过不少，但是没有实际的去了解过组件库是如何实现的，当时还比较奇怪呢，为什么下载了 element-ui 之后，就可以使用特定的标签呢？比如 <code>&lt;el-button&gt;&lt;/el-button&gt;</code>。</p><p>所以，我通过这个视频了解到了，原来组件库的内部，也都是一个一个的 <code>*.vue</code> 文件来组成的，通过插槽、传值的方式来渲染出不同的样式和内容。</p><p>开始也自己实现了几个简陋的组件进行测试，效果还是不错的，比如最简单的按钮组件，为什么通过传递不同的 <code>type</code>，就可以按钮的样式进行切换？具体按钮组件的实现原理，我在 b 站上做过<a href="https://www.bilibili.com/video/BV13F411J7qP?spm_id_from=333.999.0.0" target="_blank" rel="noreferrer">按钮组件实现原理</a>可以参考一下。</p><p>之后又尝试做了一些简单的组件，后来在测试的时候，感觉自己做的还不错，还是比较满意的，所以就在 <code>2021年5月份</code>的时候创建了仓库，发布了这个项目，做了 <code>tyh-ui</code> 组件库，就一直维护到了今天。</p><h2 id="为什么是-tyh-ui2" tabindex="-1">为什么是 tyh-ui2 <a class="header-anchor" href="#为什么是-tyh-ui2" aria-label="Permalink to &quot;为什么是 tyh-ui2&quot;">​</a></h2><p>如今的 <a href="https://github.com/Tyh2001/tyh-ui" target="_blank" rel="noreferrer">tyh-ui</a>，的安装命令是：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tyh-ui2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么为什么安装的是 <code>tyh-ui2</code> 呢？</p><p>因为我在刚开始做组件库的时候，使用的是 vue2 进行开发的，当时的仓库是 <a href="https://github.com/Tyh2001/tyh-ui-old" target="_blank" rel="noreferrer">tyh-ui-old</a>，仓库是后改名才为 <code>tyh-ui-old</code>，之前叫 <code>tyh-ui</code>，所以当时在 <code>npm</code> 上发布之后，安装的命令就默认成为了：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tyh-ui</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>npm 的仓库在<a href="https://www.npmjs.com/package/tyh-ui" target="_blank" rel="noreferrer">这里</a></p><p>因为当时的所有组件都是使用 <code>Option API</code> 来写的，记得当时写到了<code>面包屑</code>组件的时候，我就开始接触 vue3 了。vue3 最新的 <code>Composition API</code> 和 <code>script setup</code> 语法糖，不禁让我感到惊艳，这样的写法是在是太爽了，个何况当时在社区中包括一些朋友都已经在项目中用上了 <code>vue3</code>，所以我就打算将自己的组件库也升级成兼容 <code>vue3</code> 的版本。升级起来还是比较容易的，当时就又新建了一个仓库，来上传新一代的 <code>tyh-ui</code>，所以仓库取名为 <code>tyh-ui2</code>，所以在 npm 发布出去的时候，名字也就叫 <code>tyh-ui2</code> 了。</p><p>后来两个组件库我同时维护，开发出来一个新组件，直接写两份代码，一个是 <code>Option API</code>，一个是 <code>Composition API</code>，两个组件库同时维护。</p><p>又过了一段时间之后，vue3 已经成为了默认版本，我感觉到了再继续维护 vue2 的组件库也没有什么意义了，还不如直接将一个做好，有些两套代码的时间，我不如将一份代码优化好。</p><p>所以，我就将之前 vue2 版本的组件库仓库名从 <code>tyh-ui</code> 改为了 <code>tyh-ui-old</code>，仓库也直接归档了，<a href="https://tianyuhao.cn/tyhui" target="_blank" rel="noreferrer">官网</a>也给出了不再维护的提示信息。然后又将 <code>tyh-ui2</code> 的仓库名，改为了 <code>tyh-ui</code>。</p><p>这也就是说虽然仓库名叫 <code>tyh-ui</code>，可实际是 <code>tyh-ui2</code>，在后文的叙述中，我也使用 <code>tyh-ui</code> 来代表 <code>tyh-ui2</code>。</p><h2 id="迭代优化" tabindex="-1">迭代优化 <a class="header-anchor" href="#迭代优化" aria-label="Permalink to &quot;迭代优化&quot;">​</a></h2><p>今天的仓库，已经有了 <code>427</code> 次的提交记录，其中有 <code>18</code> 条是合并的 <code>PR</code>，也就是说自己提交了 <code>409</code> 次。</p><p>经历这么多次的提交，仓库从开始，到中间，再到现在，发生了惊天腹地的变化，下面介绍一次比较重大的优化部分。</p><ul><li>开始</li></ul><p>开始的时候基本上都是只是为了实现效果即可，所以内部代码有些可能需要一个计算属性就可以解决的问题，会写出多个计算属性。</p><p>有较多的冗余代码可以进行优化的地方，并且没有严格的类型校验。</p><ul><li>代码和样式优化</li></ul><p>第一次重大的优化是将每个组件内部的函数都进行了封装处理，保证了暴露在外面的函数或者变量都是有用的，并且加入了类型校验。</p><p>组件的样式也使用了统一颜色主题，部分组件进行重写样式，每个组件的样式表至少优化掉几十行的样式。实现代码减少，效果更好。</p><ul><li>格式和提交规范制定</li></ul><p>后面加入 eslint 代码格式校验，以及提交规范等，在 commit 的时候进行对所有文件的格式化，让所有组件的格式都是符合标准的，并且提交的时候必须加入提交信息。</p><p>关于规范可以见<a href="https://github.com/Tyh2001/tyh-ui/blob/master/.github/CONTRIBUTING_zh.md" target="_blank" rel="noreferrer">这里</a></p><ul><li>TypeScript 支持</li></ul><p>后面就开始学习了 TypeScript，了解了 ts 的强大之处，并边学边再一次重写组件库，组件的 <code>props</code> 进行了严格的类型校验。</p><p>每个组件标记 <code>lang=&quot;ts&quot;</code>，并且所有组件的 <code>props</code> 都单独抽离出来了一个单独的 <code>prop.ts</code> 文件，每一个参数都有严格的类型校验，可选参数使用 <a href="https://staging-cn.vuejs.org/api/utility-types.html#proptype-t" target="_blank" rel="noreferrer">PropType</a> 进行双重类型校验，<code>type</code> 也单独抽离出来了一个 <code>type.ts</code> 文件。</p><ul><li>monorepo + pnpm 构建</li></ul><p>后来有发现社区中很多的项目的目录结构和我的目录结构有着很大的差异，因为我的就直接是一个通过 <code>npm init vite xxx</code> 来创建出来的 vue3 的项目，而其他组件库的项目的结果并不是这样的，就开始研究他们的项目结构，后来得知这种项目结构较 <code>monorepo</code>。</p><p>了解了之后，就开始各种查资料查文章进行学习研究，大概研究了一天+半个晚上，终于在 <code>2021年03月17日晚上11点</code> 自己搭建出来了 demo 的雏形。之后第二天又去找了大佬帮忙指点了一下，又改了一写部分之后才正式的完成了 <code>monorepo + pnpm</code> 的项目。</p><p>很快，我就将 <code>tyh-ui</code> 的仓库进行了又一次重大的改版，将项目重头到尾的 <code>23</code> 个文件全部进行了更新。</p><p>在 3 月 18 日这天，我想改变一下官网文档的编写方式，因为发现了一个可以将 <code>markdown</code> 转换为 vue 组件的库，叫 <a href="https://github.com/antfu/vite-plugin-md" target="_blank" rel="noreferrer">vite-plugin-md</a>，就像使用它来进行重写文档，目前还正在编写中。</p><h2 id="tyh-ui-的优势" tabindex="-1">tyh-ui 的优势 <a class="header-anchor" href="#tyh-ui-的优势" aria-label="Permalink to &quot;tyh-ui 的优势&quot;">​</a></h2><p>有一说一，<code>tyh-ui</code> 在我看来还是一个很有优势的组件库，主要有以下几个原因：</p><ol><li>足够轻量级</li></ol><p>性能优化，这个词可谓是现在对于前端工程师必备的一个技能，对于性能优化，我首先想到的就是：在不影响正常使用的情况下，尽可能的减小包的体积。在这一点上，tyh-ui 可谓是占了比较大的优势，可以通过 <a href="https://www.npmjs.com/package/tyh-ui2" target="_blank" rel="noreferrer">npm tyh-ui</a> 来看到它的体积，只有 <strong>189kb</strong>，而且内部包含了 <code>30+</code> 常用组件。</p><p>为做到这一点，我做了很多的细节的优化，比如说，绑定的 class，可以参考下面代码段：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tyh-button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[\`tyh-button-\${type}\`]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中是一个静态的 class，和一个动态的 class，那么我进行优化之后，就会变成：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[\`tyh-button-\${type}\`, &#39;tyh-button&#39;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样无形中就会优化出来了一些字符，我的要求就是：能优化的地方必须要优化，但是也要保证代码的健壮。</p><ol start="2"><li>更适合新手阅读源码</li></ol><p>在很多新手在读组件的源码的时候，直接读那种大型的组件库，如 element-plus、naive-ui 等，它们的源码读起来可能会十分的痛苦，有几个原因：</p><ul><li>你对源码可能并不熟悉</li><li>你可能并不了解 jsx</li><li>jsx 阅读起来本来就不是很友好</li></ul><p>现在社区中大多数组件库都是使用 <a href="https://github.com/facebook/jsx" target="_blank" rel="noreferrer">jsx</a> 来写的，所以并不适合去通过阅读源码来了解组件的内部实现原理。因为我的组件库是使用 <code>template</code> 来编写的，所以比较适合于阅读源码，这也是我要说的下一个优势。</p><ol start="3"><li>使用 template 编写</li></ol><p>关于使用 <code>template</code>，和 <code>jsx</code> 的区别，可以通过<a href="https://www.zhihu.com/question/436260027/answer/1661092534" target="_blank" rel="noreferrer">为什么 Vue3 的组件库都在使用 jsx/tsx？</a> 这片文章来进行了解到答案。</p><p>所以，<code>tyh-ui</code> 会一直保持使用 <code>template</code> 来编写的，目前还没有使用到 <code>jsx</code>，但是不排除会有一些极其动态的组件产生，比如下面场景，不得不说 <code>jsx</code> 的优势：</p><p>通过传递参数，参数为 <code>1、2、3、4、5、6</code> 其中的一个，通过传递的数字不同，渲染不同的 <code>h几</code> 标签，如果使用 <code>template</code> 来写，可能就会成为下面这样：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h5</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h6</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num === 6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num: Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这样的代码，不免是有些不友好的。关于 <code>jsx</code>，在这里不过多赘述。</p><blockquote><p>所以，希望你可以通过 tyh-ui，了解到组件的开发思想和设计模式，在不久的将来，带着这些思想，孕育出更高阶的组件库。</p></blockquote><h2 id="准备开发新的组件库" tabindex="-1">准备开发新的组件库 <a class="header-anchor" href="#准备开发新的组件库" aria-label="Permalink to &quot;准备开发新的组件库&quot;">​</a></h2><p>最近我在开始研究，打算再一次开发一个全新的组件库，对于 <code>tyh-ui</code>，它其实还并没有被社区大多数人认可，每周的 <code>npm</code> 下载量最近可以保持在 400 ～ 600 左右，可这也并不是一个我想要的结果，我也希望自己的组件库也可以受到更多人的关注，所以我又一次开发了全新的组件库 <a href="https://github.com/Tyh2001/fighting-design" target="_blank" rel="noreferrer">fighting-design</a></p><h2 id="新的小伙伴加入" tabindex="-1">新的小伙伴加入 <a class="header-anchor" href="#新的小伙伴加入" aria-label="Permalink to &quot;新的小伙伴加入&quot;">​</a></h2><p>欢迎你加入！</p><p>在这里，不需要你的技术有多么优秀，只希望你对做开源有足够的热爱。如果你有技术，你可以参加主要的开发；如果你是一个新手，可以来写 Ui 设计方面的开发，就算你技术水平一团糟，还可以看看文档，找一找错别字，提一提 issues 或 pr 呢，不是吗？</p>`,66),l=[n];function p(h,r,k,d,o,c){return a(),i("div",null,l)}const g=s(t,[["render",p]]);export{u as __pageData,g as default};
