import{_ as s,o as a,c as n,a as l}from"./app.0135db6b.js";const A=JSON.parse('{"title":"第四章 响应系统的作用与实现","description":"","frontmatter":{},"headers":[{"level":2,"title":"4.1 响应式数据与副作用函数","slug":"_4-1-响应式数据与副作用函数","link":"#_4-1-响应式数据与副作用函数","children":[]},{"level":2,"title":"4.2 响应式数据的基本实现","slug":"_4-2-响应式数据的基本实现","link":"#_4-2-响应式数据的基本实现","children":[]},{"level":2,"title":"4.3 设计一个完善的响应式系统","slug":"_4-3-设计一个完善的响应式系统","link":"#_4-3-设计一个完善的响应式系统","children":[]},{"level":2,"title":"4.4 分支切换与 cleanup","slug":"_4-4-分支切换与-cleanup","link":"#_4-4-分支切换与-cleanup","children":[]},{"level":2,"title":"4.5 嵌套的 effect 与 effect 栈","slug":"_4-5-嵌套的-effect-与-effect-栈","link":"#_4-5-嵌套的-effect-与-effect-栈","children":[]},{"level":2,"title":"4.6 避免无限递归循环","slug":"_4-6-避免无限递归循环","link":"#_4-6-避免无限递归循环","children":[]},{"level":2,"title":"4.7 调度执行","slug":"_4-7-调度执行","link":"#_4-7-调度执行","children":[]},{"level":2,"title":"4.8 计算属性 computed 与 lazy","slug":"_4-8-计算属性-computed-与-lazy","link":"#_4-8-计算属性-computed-与-lazy","children":[]},{"level":2,"title":"4.9 watch 的实现原理","slug":"_4-9-watch-的实现原理","link":"#_4-9-watch-的实现原理","children":[]},{"level":2,"title":"4.10 立即执行的 watch 与回调的时机","slug":"_4-10-立即执行的-watch-与回调的时机","link":"#_4-10-立即执行的-watch-与回调的时机","children":[]},{"level":2,"title":"4.11 过期的副作用","slug":"_4-11-过期的副作用","link":"#_4-11-过期的副作用","children":[]}],"relativePath":"article/vue-design/page-4.md"}'),p={name:"article/vue-design/page-4.md"},o=l(`<h1 id="第四章-响应系统的作用与实现" tabindex="-1">第四章 响应系统的作用与实现 <a class="header-anchor" href="#第四章-响应系统的作用与实现" aria-hidden="true">#</a></h1><h2 id="_4-1-响应式数据与副作用函数" tabindex="-1">4.1 响应式数据与副作用函数 <a class="header-anchor" href="#_4-1-响应式数据与副作用函数" aria-hidden="true">#</a></h2><p>什么是副作用函数？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fun1</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">12</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">change</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上两个，都属于是副作用函数，第一个设置了 body 的文本内容，但是除了 fun1 之外的任何函数都可以修改和设置 body 的文本内容，这个函数可能会影响其它函数的执行；第二个函数修改了全局变量，所以类似这两种的函数，都称之为<code>副作用函数</code>。</p><p>接下来来说一说响应式数据，见下面例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">effect</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的副作用函数将 body 的值设置为了 <code>obj.text</code>，但是我们希望在执行下面代码的时候，希望这个副作用函数重新执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>但是显然我们在改变 <code>obj.text</code> 之后，现在并不能实现效果，接下来我们将会介绍。</p><h2 id="_4-2-响应式数据的基本实现" tabindex="-1">4.2 响应式数据的基本实现 <a class="header-anchor" href="#_4-2-响应式数据的基本实现" aria-hidden="true">#</a></h2><p>之前介绍了，响应式系统需要的是，当副作用函数被调用时候，会获取 <code>obj.text</code> 的操作，那么当下一次修改数据时候，也可以希望能调用副作用函数重新赋值。vue3 中使用 <a href="https://tianyuhao.cn/blog/javascript/proxy.html" target="_blank" rel="noreferrer">proxy</a> 来实现对数据的代理，实现每一次操作都可以被监听到。下面来实现一个简单的例子进行演示基本的响应式系统：</p><details class="details custom-block"><summary>显示代码</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 原始数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 用来存储副作用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建代理，代理 obj</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 将副作用函数添加到容器中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#676E95;font-style:italic;">// 返回指定的值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 设置</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newVal</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 赋值为新值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()) </span><span style="color:#676E95;font-style:italic;">// 调用副作用函数重新渲染页面</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 副作用函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">effect</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 三秒后重新赋值，可以发现已经成为响应式了</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">p</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">改变啦</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div></details><p>这就是一个基本的响应式系统的实现，但是这个逻辑还存在着很多问题，其实还远远的不够灵活。</p><h2 id="_4-3-设计一个完善的响应式系统" tabindex="-1">4.3 设计一个完善的响应式系统 <a class="header-anchor" href="#_4-3-设计一个完善的响应式系统" aria-hidden="true">#</a></h2><p>在上个例子中，副作用函数名为 <code>effect</code>，但是如果副作用函数一旦不叫这个名字了，那么整个系统就会崩溃，接下来解决这个问题：</p><details class="details custom-block"><summary>显示代码</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义全局变量来存储副作用函数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> activeEffect</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果有了副作用函数的话</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 就添加到容器中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newVal</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">effect</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fn</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 先将函数赋值给全局变量</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 再调用，触发 get</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 传入一个匿名函数</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">响应式数据</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div></details><p>解决的方法是：通过一个全局的变量 <code>activeEffect</code> 来存储副作用函数，<code>effect</code> 变成了可以给 <code>activeEffect</code> 赋值的函数，并且调用传递进来的函数，并调用触发 <code>get</code>。</p><p>可以通过打印发现，其实 <code>effect</code> 被调用了两次，一次是在页面刚加载的时候，还有一次是重新设置值的时候</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">调用</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 会触发两次</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div><p>接下来看另一个问题：如果定时器中，是给 obj 设置了一个新的属性，而不是修改之前的属性，那么就不需要触发响应式系统了，但是现在，不管怎么操作，都会触发响应式系统，这显然是不合理的，我们实际需要的是：<strong>只需要在副作用函数与被操作的字段直接产生联系即可</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">say</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">响应式数据</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 也会调用函数触发响应式</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div><p>所以接下来要重新设置拦截器代码。那么接下来将会使用到：<a href="https://tianyuhao.cn/blog/javascript/data-type.html#map" target="_blank" rel="noreferrer">Map()</a>、<a href="https://tianyuhao.cn/blog/javascript/data-type.html#weakmap" target="_blank" rel="noreferrer">WeakMap()</a> 和 <a href="https://tianyuhao.cn/blog/javascript/data-type.html#set" target="_blank" rel="noreferrer">Set()</a></p><details class="details custom-block"><summary>显示代码</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bucket </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> activeEffect</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果没用 activeEffect 直接返回</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 取得 WeakMap 中键值所对应的函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果 depsMap 不存在，那么就新建一个 Map 与 target 关联</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#F07178;">()))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 根据 key 从 depsMap 中取得 deps，它是一个 Set 类型</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 里面存放的是与当前所有 key 相关的副作用函数 effects</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">deps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果 deps 不存在 同样新建一个 Set 并与 key 并联</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">deps</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">deps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#F07178;">()))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将副作用函数添加到容器中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 返回属性值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 设置属性值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 根据 target 从容器中取得 depsMap</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果不存在 直接返回</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 根据 key 取得所有副作用函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">effects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行每一个副作用函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">effects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">effects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div></details><p>最终的数据结构如下：</p><details class="details custom-block"><summary>显示代码</summary><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">WeakMap</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Entries</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">0:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{Object</span><span style="color:#BABED8;"> =</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Map</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#FFCB6B;">key:</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">text:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">改变啦</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">text2:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">新增的数据</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Prototype</span><span style="color:#89DDFF;">]]</span><span style="color:#82AAFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Object</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#FFCB6B;">value:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Map</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Entries</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">0:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> =</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#FFCB6B;">key:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#FFCB6B;">value:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Entries</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#FFCB6B;">size:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Prototype</span><span style="color:#89DDFF;">]]</span><span style="color:#82AAFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Set</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">size:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Prototype</span><span style="color:#89DDFF;">]]</span><span style="color:#82AAFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Map</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;">Prototype</span><span style="color:#89DDFF;">]]</span><span style="color:#82AAFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">WeakMap</span></span>
<span class="line"></span></code></pre></div></details><p>也许这样并不直观，下面的图描述了它们之间的关系</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">┌──────────┐</span></span>
<span class="line"><span style="color:#babed8;">│  weakMap │</span></span>
<span class="line"><span style="color:#babed8;">└────┬─────┘</span></span>
<span class="line"><span style="color:#babed8;">     │</span></span>
<span class="line"><span style="color:#babed8;">┌────┴─────┐</span></span>
<span class="line"><span style="color:#babed8;">│    key   │</span></span>
<span class="line"><span style="color:#babed8;">└────┬─────┘</span></span>
<span class="line"><span style="color:#babed8;">     │</span></span>
<span class="line"><span style="color:#babed8;">┌────▼─────┐     ┌──────────┐</span></span>
<span class="line"><span style="color:#babed8;">│   value1 ├────►│   Map    │</span></span>
<span class="line"><span style="color:#babed8;">└────┬─────┘     └────┬─────┘</span></span>
<span class="line"><span style="color:#babed8;">     │                │</span></span>
<span class="line"><span style="color:#babed8;">┌────▼─────┐          │</span></span>
<span class="line"><span style="color:#babed8;">│  value2  │     ┌────┴─────┐     ┌─────────┐</span></span>
<span class="line"><span style="color:#babed8;">└──────────┘     │    key   ├────►│  Set    │</span></span>
<span class="line"><span style="color:#babed8;">                 └────┬─────┘     └───┬─────┘</span></span>
<span class="line"><span style="color:#babed8;">                      │               │</span></span>
<span class="line"><span style="color:#babed8;">                 ┌────▼─────┐     ┌───┴─────┐</span></span>
<span class="line"><span style="color:#babed8;">                 │   value1 │     │  value1 │</span></span>
<span class="line"><span style="color:#babed8;">                 └────┬─────┘     └───┬─────┘</span></span>
<span class="line"><span style="color:#babed8;">                      │               │</span></span>
<span class="line"><span style="color:#babed8;">                 ┌────▼─────┐     ┌───▼─────┐</span></span>
<span class="line"><span style="color:#babed8;">                 │ value2   │     │  value2 │</span></span>
<span class="line"><span style="color:#babed8;">                 └──────────┘     └─────────┘</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h2 id="_4-4-分支切换与-cleanup" tabindex="-1">4.4 分支切换与 cleanup <a class="header-anchor" href="#_4-4-分支切换与-cleanup" aria-hidden="true">#</a></h2><h2 id="_4-5-嵌套的-effect-与-effect-栈" tabindex="-1">4.5 嵌套的 effect 与 effect 栈 <a class="header-anchor" href="#_4-5-嵌套的-effect-与-effect-栈" aria-hidden="true">#</a></h2><h2 id="_4-6-避免无限递归循环" tabindex="-1">4.6 避免无限递归循环 <a class="header-anchor" href="#_4-6-避免无限递归循环" aria-hidden="true">#</a></h2><h2 id="_4-7-调度执行" tabindex="-1">4.7 调度执行 <a class="header-anchor" href="#_4-7-调度执行" aria-hidden="true">#</a></h2><h2 id="_4-8-计算属性-computed-与-lazy" tabindex="-1">4.8 计算属性 computed 与 lazy <a class="header-anchor" href="#_4-8-计算属性-computed-与-lazy" aria-hidden="true">#</a></h2><h2 id="_4-9-watch-的实现原理" tabindex="-1">4.9 watch 的实现原理 <a class="header-anchor" href="#_4-9-watch-的实现原理" aria-hidden="true">#</a></h2><h2 id="_4-10-立即执行的-watch-与回调的时机" tabindex="-1">4.10 立即执行的 watch 与回调的时机 <a class="header-anchor" href="#_4-10-立即执行的-watch-与回调的时机" aria-hidden="true">#</a></h2><h2 id="_4-11-过期的副作用" tabindex="-1">4.11 过期的副作用 <a class="header-anchor" href="#_4-11-过期的副作用" aria-hidden="true">#</a></h2>`,37),e=[o];function t(c,r,y,D,F,B){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{A as __pageData,E as default};
